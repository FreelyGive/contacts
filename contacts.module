<?php

/**
 * @file
 * Module related hook implementations for the contacts module.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\contacts\Form\ContactsProfileForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\user\RoleInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
use Drupal\views\Entity\View;

/**
 * Implements hook_theme().
 */
function contacts_theme() {
  return [
    'contacts_dash_tabs' => [
      'variables' => ['tabs' => []],
      'template' => 'contacts-dash-tabs',
    ],
    'contacts_dash_tab_content' => [
      'variables' => [
        'content' => [],
        'attributes' => [],
        'region_attributes' => [],
        'manage_mode' => NULL,
        'subpage' => NULL,
      ],
      'template' => 'contacts-dash-tab-content',
    ],
    'contacts_dash_summary' => [
      'variables' => ['user' => NULL],
      'template' => 'contacts-dash-summary',
    ],
    'contacts_dash_manage' => [
      'variables' => [
        'content' => [],
        'tabs' => [],
        'types' => [],
        'attributes' => [],
        'user' => NULL,
        'subpage' => NULL,
      ],
      'template' => 'contacts-dash-manage',
    ],
    'contacts_dnd_card' => [
      'variables' => [
        'id' => NULL,
        'mode' => NULL,
        'user' => NULL,
        'subpage' => NULL,
        'block' => [],
        'configure_link' => NULL,
        'attributes' => [],
        'label' => '',
        'description' => '',
        'profiles' => '',
        'tabs' => '',
        'link' => [],
      ],
      'template' => 'contacts-dnd-card',
    ],
    'contacts_hat' => [
      'variables' => [
        'role' => NULL,
        'hide_label' => NULL,
        'hide_button' => NULL,
      ],
      'template' => 'contacts-hat',
    ],
    'user__contacts_dashboard_row' => [
      'base hook' => 'user',
      'template' => 'user--contacts-dashboard-row',
    ],
    'user__contacts_dashboard_row_small' => [
      'base hook' => 'user',
      'template' => 'user--contacts-dashboard-row-small',
    ],
  ];
}

/**
 * Prepares variables for contact dashboard tabs.
 *
 * Default template: contacts-dash-tabs.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - tabs: Associative array of tabs and tab properties.
 */
function template_preprocess_contacts_dash_tabs(array &$variables) {
  $variables['attributes'] = [
    'class' => [
      'contacts-ajax-tabs',
      'tabs',
    ],
  ];

  foreach ($variables['tabs'] as &$tab) {
    $tab['attributes'] = !empty($tab['attributes']) ? new Attribute($tab['attributes']) : new Attribute();
    $tab['link_attributes'] = !empty($tab['link_attributes']) ? new Attribute($tab['link_attributes']) : new Attribute();
  }
}

/**
 * Prepares variables for contact tab content.
 *
 * Default template: contact-tab-content.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - region_attributes: HTML markup attributes for the content wrapper.
 */
function template_preprocess_contact_tab_content(array &$variables) {
  $variables['region_attributes'] = new Attribute($variables['region_attributes']);
}

/**
 * Prepares variables for contact dashboard tab content.
 *
 * Default template: contacts-dash-tab-content.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - region_attributes: HTML markup attributes for the content wrapper.
 */
function template_preprocess_contacts_dash_tab_content(array &$variables) {
  $variables['messages'] = $variables['content']['messages'];
  $variables['region_attributes'] = new Attribute($variables['region_attributes']);
  /* @var \Drupal\contacts\Entity\ContactTab $tab */
  $tab = \Drupal::service('contacts.tab_manager')->getTabByPath(NULL, $variables['subpage']);

  if ($variables['manage_mode']) {
    $variables['tab'] = $tab->id();

    $roles = $tab->getRoles();

    // Show required hats for tab.
    foreach ($roles as $role) {
      $variables['header']['hats'][] =   [
        '#theme' => 'contacts_hat',
        '#role' => $role,
      ];
    }
  }

  $layout = $tab->get('layout') ?: 'contacts_tab_content.stacked';

  // @todo switch to core layout manager plugin.manager.core.layout?
  /* @var \Drupal\layout_plugin\Plugin\Layout\LayoutPluginManager $layoutPluginManager */
  $layoutPluginManager = \Drupal::service('plugin.manager.layout_plugin');
  /* @var \Drupal\layout_plugin\Plugin\Layout\LayoutInterface $layoutInstance */
  $layoutInstance = $layoutPluginManager->createInstance($layout, []);

  $regions = [];

  foreach ($layoutInstance->getPluginDefinition()['regions'] as $key => $region) {
    if (!empty($variables['content'][$key])) {
      $regions[$key] = $variables['content'][$key];
    }
  }

  $variables['content'] = $layoutInstance->build($regions);
  $variables['content']['#region_attributes'] = $variables['region_attributes'];
}

/**
 * Prepares variables for contact tab content stacked layout.
 *
 * Default template: contacts-tab-content-stacked.html.twig.
 *
 * @see template_preprocess_contacts_dash_tab_content().
 */
function template_preprocess_contacts_tab_content_stacked(array &$variables) {
  $content = $variables['content'];
  $variables['region_attributes'] = $content['#region_attributes'] ?: [];
}

/**
 * Prepares variables for a contacts hat icon.
 *
 * Default template: contacts-hat.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - role: The machine name for the role to be rendered.
 */
function template_preprocess_contacts_hat(array &$variables) {
  $role = \Drupal::entityTypeManager()->getStorage('user_role')->load($variables['role']);
  $variables['label'] = $role->label();
  $variables['color'] = '#' . $role->getThirdPartySetting('contacts', 'user_role_color') ?: 'blue';
  $variables['icon'] = 'fa-' . $role->getThirdPartySetting('contacts', 'user_role_icon') ?: 'fa-user';
}

/**
 * Prepares variables for contacts drag and drop cards.
 *
 * Default template: contacts-dnd-card.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - region_attributes: HTML markup attributes for the content wrapper.
 */
function template_preprocess_contacts_dnd_card(array &$variables) {
  /* @var \Drupal\contacts\ContactsTabManager $tab_manager */
  $tab_manager = \Drupal::service('contacts.tab_manager');

  /* @var \Drupal\Core\Block\BlockManager $block_manager */
  $block_manager = \Drupal::service('plugin.manager.block');
  $definition = $block_manager->getDefinition($variables['id']);

  /* @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
  $entity_type_manager = \Drupal::service('entity_type.manager');

  list($variables['block_plugin'], $variables['identifier'], $variables['bundle']) = preg_split( "/(:|-)/", $variables['id']);

  $variables['attributes']['data-dnd-contacts-block-id'] = "{$variables['block_plugin']}_{$variables['identifier']}_{$variables['bundle']}";
  $variables['attributes']['data-dnd-block-mode'] = $variables['mode'];
  switch ($variables['mode']) {
    case 'meta':
      switch ($variables['block_plugin']) {
        case 'contacts_entity':
          $entity_type = $entity_type_manager->getDefinition($variables['identifier']);

          if ($entity_type->getBundleEntityType()) {
            $bundle_storage = $entity_type_manager->getStorage($entity_type->getBundleEntityType());
            $bundle_entity = $bundle_storage->load($variables['bundle']);
            $variables['label'] = $bundle_entity->label();
            $variables['content']['description'] = "{$entity_type->get('label')} entity for {$bundle_entity->label()}.";

            // @todo find out how to abstract this.
            if ($variables['identifier'] == 'profile' && !empty(array_filter($bundle_entity->getRoles()))) {
              $roles = user_roles();
              uasort($roles, 'contacts_sort_roles');
              $roles = array_intersect(array_keys($roles), $bundle_entity->getRoles());
              $hats = [];
              // @todo Show hat icons instead of labels.
              foreach ($roles as $role) {
                $hats[] = [
                  '#theme' => 'contacts_hat',
                  '#role' => $role,
                  '#hide_label' => TRUE,
                ];
              }
              $variables['content']['needed_hats'] = $hats;
              $variables['content']['links'] = [
                'fields' => [
                  'text' => 'Manage profile fields',
                  'url' => "/admin/config/people/profiles/types/manage/{$variables['bundle']}/fields",
                ],
              ];
            }
          }
          else {
            $variables['label'] = $entity_type->get('label');
            $variables['content']['description'] = "{$entity_type->get('label')} entity.";
          }

          $variables['attributes']['data-dnd-contacts-entity-type'] = $variables['entity'] = $variables['identifier'];
          $variables['attributes']['data-dnd-contacts-entity-bundle'] = $variables['bundle'];
          $variables['attributes']['data-dnd-contacts-entity-relationship'] = "{$variables['identifier']}_{$variables['bundle']}";
          break;

        case 'views_block':
          $view = $entity_type_manager->getStorage('view')->load($variables['identifier']);
          $variables['label'] = $view->get('label');

          $displays = $view->get('display');
          if (!empty($displays['default']['display_options']['title'])) {
            $variables['label'] = $displays['default']['display_options']['title'];
          }
          if (!empty($displays[$variables['bundle']]['display_options']['title'])) {
            $variables['label'] = $displays[$variables['bundle']]['display_options']['title'];
          }

          $variables['content']['description'] = $view->get('description');
          $variables['attributes']['data-dnd-contacts-entity-type'] = $variables['entity'] = 'view';
          $variables['attributes']['data-dnd-contacts-entity-bundle'] = "{$variables['identifier']}:{$variables['bundle']}";
          $variables['content']['links'] = [
            'edit' => [
              'text' => 'Edit View',
              'url' => "/admin/structure/views/view/{$variables['identifier']}/edit/{$variables['bundle']}",
            ],
          ];
          break;
      }

      $variables['content']['placed_tabs'] = $tab_manager->getTabsWithBlock("{$variables['block_plugin']}_{$variables['identifier']}_{$variables['bundle']}");
      $variables['content']['link'] = [];
      break;

    case 'manage':
      $variables['pseudo_content'] = TRUE;
      $variables['configure_link'] = "/admin/contacts-ajax/manage-configure-block/{$variables['user']}/{$variables['subpage']}/{$variables['attributes']['data-dnd-contacts-block-id']}";

      switch ($variables['block_plugin']) {
        case 'contacts_entity':
          $variables['label'] = $variables['block']->label(FALSE);
          $entity_type = $entity_type_manager->getDefinition($variables['identifier']);
          $variables['entity'] = $entity_type;
          $variables['attributes']['data-dnd-contacts-entity-type'] = $variables['entity'] = $variables['identifier'];
          $variables['attributes']['data-dnd-contacts-entity-bundle'] = $variables['bundle'];

          if ($entity_type->getBundleEntityType()) {
            $bundle_storage = $entity_type_manager->getStorage($entity_type->getBundleEntityType());
            $bundle_entity = $bundle_storage->load($variables['bundle']);

            // @todo find out how to abstract this.
            if ($variables['identifier'] == 'profile' && !empty(array_filter($bundle_entity->getRoles()))) {
              $roles = array_filter($bundle_entity->getRoles());
              $hats = [];
              // @todo Show hat icons instead of labels.
              foreach ($roles as $role) {
                $hats[] = [
                  '#theme' => 'contacts_hat',
                  '#role' => $role,
                ];
              }
              $variables['footer']['visible_hats'] = $hats;

              $variables['content']['links'] = [
                'fields' => [
                  'text' => 'Manage profile fields',
                  'url' => "/admin/config/people/profiles/types/manage/{$variables['bundle']}/fields",
                ],
                'view-modes' => [
                  'text' => 'Manage display',
                  'url' => "/admin/config/people/profiles/types/manage/{$variables['bundle']}/display",
                ],
              ];
            }
          }

          break;

        case 'views_block':
//          $view = $entity_type_manager->getStorage('view')->load($variables['identifier']);
          $variables['label'] = $variables['block']->label();
          $variables['entity'] = 'view';
          $variables['attributes']['data-dnd-contacts-entity-type'] = $variables['entity'] = 'view';
          $variables['attributes']['data-dnd-contacts-entity-bundle'] = "{$variables['identifier']}_{$variables['bundle']}";
          $variables['content']['links'] = [
            'edit' => [
              'text' => 'Edit View',
              'url' => "/admin/structure/views/view/{$variables['identifier']}/edit/{$variables['bundle']}",
            ],
          ];
          break;
      }
      break;

    case 'configure':
      $variables['label'] = 'Configure block';

      $form = \Drupal::formBuilder()->getForm(\Drupal\contacts\Form\DashboardBlockConfigureForm::class, $variables['block']);
      $variables['content']['configure_form'] = $form;
      break;
  }

  $variables['attributes'] = new Attribute($variables['attributes']);
}

/**
 * Prepares variables for contact dashboard summary block.
 *
 * Default template: contacts-dash-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - user: Fully loaded drupal User object.
 *   - crm_indiv: Boolean whether contact has an indiv profile.
 *   - crm_org: Boolean whether contact has an org profile.
 */
function template_preprocess_contacts_dash_summary(array &$variables) {
  /* @var \Drupal\decoupled_auth\Entity\DecoupledAuthUser $user */
  $user = $variables['user'];

  $image_display = [
    'label' => 'hidden',
    'type' => 'image',
    'settings' => [
      'image_style' => 'contacts_small',
    ],
  ];
  $default_image_element = [
    '#theme' => 'image_style',
    '#style_name' => $image_display['settings']['image_style'],
    '#width' => 100,
    '#height' => 100,
    '#attributes' => [],
  ];
  $variables['image'] = $user->user_picture[0] ? $user->user_picture[0]->view($image_display) : '';

  if ($user->getEmail()) {
    $email = $user->getEmail();
    $variables['email'] = Link::fromTextAndUrl($email, Url::fromUri('mailto:' . $email));
  }

  $variables['name'] = $user->getDisplayName();

  // For individuals.
  if ($user->hasRole('crm_indiv')) {
    if ($profile = $user->profile_crm_indiv->entity) {
      if ($profile->crm_phone->value) {
        $variables['phone'] = $profile->crm_phone->value;
      }
      if ($profile->crm_dob[0]) {
        $variables['dob'] = $profile->crm_dob[0]->view([
          'label' => 'hidden',
          'settings' => [
            'format_type' => 'html_date',
          ],
        ]);
      }
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
  // For organisations.
  elseif ($user->hasRole('crm_org')) {
    if ($profile = $user->profile_crm_org->entity) {
      if ($profile->crm_phone->value) {
        $variables['phone'] = $profile->crm_phone->value;
      }
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-org.png';
    }
  }
  // Assume this is a web account, so give some indiv like features.
  else {
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
  $roles = user_roles();
  uasort($roles, 'contacts_sort_roles');
  $roles = array_intersect(array_keys($roles), $user->getRoles());
  $variables['hats'] = [];

  foreach ($roles as $role) {
    $variables['hats'][] = [
      '#theme' => 'contacts_hat',
      '#role' => $role,
    ];
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Add contacts dashboard form operation to profile entity.
 */
function contacts_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['profile']->setFormClass('crm_dashboard', ContactsProfileForm::class);
}

/**
 * Implements hook_toolbar_alter().
 *
 * Add contacts icon css to toolbar.
 */
function contacts_toolbar_alter(&$items) {
  // Move the User tab to the right.
  $items['administration']['#attached']['library'][] = 'contacts/contacts.icons';
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function contacts_theme_suggestions_user(array $variables) {
  $suggestions = [];
  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['elements']['#user'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'user__' . $sanitized_view_mode;
  foreach ($user->getRoles(TRUE) as $role) {
    if (substr($role, 0, 4) == 'crm_') {
      $suggestions[] = 'user__' . $role . '__';
      $suggestions[] = 'user__' . $role . '__' . $sanitized_view_mode;
    }
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function contacts_preprocess_user(&$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $view_modes = [
    'contacts_dashboard_row',
    'contacts_dashboard_row_small',
  ];
  if (!in_array($view_mode, $view_modes)) {
    return;
  }

  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['user'];
  $image_display = [
    'label' => 'hidden',
    'type' => 'image',
    'settings' => [
      'image_style' => $view_mode == 'contacts_dashboard_row' ? 'contacts_small' : 'contacts_tiny',
    ],
  ];
  $default_image_element = [
    '#theme' => 'image_style',
    '#style_name' => $image_display['settings']['image_style'],
    '#width' => 100,
    '#height' => 100,
    '#attributes' => [],
  ];

  // Set some defaults.
  // @todo: Simplify this when we have 'primary fields'.
  $variables['url'] = Url::fromRoute('page_manager.page_view_contacts_dashboard_contact', [
    'user' => $user->id(),
  ]);
  $variables['label'] = $user->getDisplayName();
  $variables['email'] = $user->getEmail();
  $variables['image'] = $user->user_picture[0] ? $user->user_picture[0]->view($image_display) : '';
  $variables['address'] = '';

  $roles = user_roles();
  uasort($roles, 'contacts_sort_roles');
  $roles = array_intersect(array_keys($roles), $user->getRoles());

  foreach ($roles as $role) {
    $variables['roles'][] = [
      '#theme' => 'contacts_hat',
      '#role' => $role,
      '#hide_label' => TRUE,
      '#hide_button' => TRUE,
    ];
  }

  // For individuals.
  if ($user->hasRole('crm_indiv')) {
    if ($profile = $user->profile_crm_indiv->entity) {
      $variables['profile'] = $profile;
      $variables['label'] = $profile->crm_name->value;
      $variables['address'] = $profile->crm_address->locality;
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
  // For organisations.
  elseif ($user->hasRole('crm_org')) {
    if ($profile = $user->profile_crm_org->entity) {
      $variables['profile'] = $profile;
      $variables['label'] = $profile->crm_org_name->value;
      $variables['address'] = $profile->crm_org_address->locality;
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-org.png';
    }
  }
  // Assume this is a web account, so give some indiv like features.
  else {
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function contacts_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_role_form') {
    /* @var \Drupal\user\Entity\Role $role */
    $role = $form_state->getFormObject()->getEntity();
    $form['user_role_color'] = array(
      '#type' => 'select',
      '#title' => t('Role Color'),
      '#description' => t('Choose a 6 digit hex color to visually represent this role.'),
      '#field_prefix' => '#',
      '#options' => contacts_get_hat_palette(),
      '#default_value' => $role->getThirdPartySetting('contacts', 'user_role_color'),
      '#weight' => 1,
    );

    $form['user_role_icon'] = array(
      '#type' => 'textfield',
      '#title' => t('Role Icon'),
      '#description' => t('Enter the class for the font awesome icon you would like to use.') . '<br>http://fontawesome.io/icons/',
      '#field_prefix' => 'fa-',
      '#default_value' => $role->getThirdPartySetting('contacts', 'user_role_icon'),
      '#weight' => 2,
      '#size' => 20,
    );

    $form['#entity_builders'][] = 'contacts_form_user_role_add_form_builder';
  }
}

/**
 * Entity builder for the menu configuration entity.
 */
function contacts_form_user_role_add_form_builder($entity_type, \Drupal\user\Entity\Role $role, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->getValue('user_role_color')) {
    $role->setThirdPartySetting('contacts', 'user_role_color', $form_state->getValue('user_role_color'));
  }
  else {
    $role->unsetThirdPartySetting('contacts', 'user_role_color');
  }

  if ($form_state->getValue('user_role_icon')) {
    $role->setThirdPartySetting('contacts', 'user_role_icon', $form_state->getValue('user_role_icon'));
  }
  else {
    $role->unsetThirdPartySetting('contacts', 'user_role_icon');
  }
}

/**
 * Sort roles by CRM then alphabetically.
 *
 * @param \Drupal\user\RoleInterface $a
 *   The first role.
 * @param \Drupal\user\RoleInterface $b
 *   The first role.
 *
 * @return int
 *   The comparison result for uasort().
 */
function contacts_sort_roles(RoleInterface $a, RoleInterface $b) {
  $a_crm = substr($a->id(), 0, 4) == 'crm_';
  $b_crm = substr($b->id(), 0, 4) == 'crm_';
  if ($a_crm xor $b_crm) {
    return $a_crm ? -1 : 1;
  }
  return strnatcmp($a->label(), $b->label());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function contacts_preprocess_views_view_unformatted(&$variables) {
  if ($variables['view']->id() == 'contacts_dashboard_indexed') {
    foreach ($variables['rows'] as $id => &$row) {
      $url = Url::fromRoute('page_manager.page_view_contacts_dashboard_contact', [
        'user' => $row['content']['#user']->id(),
      ]);
      $row['attributes']->setAttribute('data-row-link', $url->toString());
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function contacts_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($output['#view']->id() == 'contacts_dashboard_indexed') {
    $output['#attached']['library'][] = 'contacts/listings';
  }
}

/**
 * Implements hook_panels_build_alter().
 */
function contacts_panels_build_alter(array &$build, PanelsDisplayVariant $panels_display) {
  if ($panels_display->getStorageId() == 'contacts_dashboard-panels_variant-0') {
    // Find the crm_type facet and make the labels plural.
    if (isset($build['sidebar'])) {
      foreach (Element::children($build['sidebar']) as $key) {
        $block = &$build['sidebar'][$key];
        if (isset($block['#plugin_id']) && $block['#plugin_id'] == 'facet_block:crm_type') {
          foreach ($block['content'][0]['#items'] as &$item) {
            switch ($item['#attributes']['data-drupal-facet-item-value']) {
              case 'crm_indiv':
                $item['#title']['#value'] = t('People');
                break;

              case 'crm_org':
                $item['#title']['#value'] = t('Organisations');
                break;
            }
          }
        }
      }
    }
  }
  elseif ($panels_display->getStorageId() == 'contacts_dashboard_contact-panels_variant-0') {
    $build['#attached']['library'][] = 'contacts/contact';
  }
}

/**
 * Implements hook_block_alter().
 *
 * Allow dashboard placement of views blocks if they have the correct tag.
 */
function contacts_block_alter(&$definitions) {
  // Since menu blocks use derivatives, check the definition ID instead of
  // relying on the plugin ID.
  foreach ($definitions as $key => &$definition) {
    if ($definition['id'] === 'views_block') {
      if (substr($key, 0, 12) == 'views_block:') {
        // @fixme Do we need the display at this point?
        list($view_id, $view_display) = explode('-', substr($key, 12));

        $view = View::load($view_id);
        if (in_array('contacts_dashboard', explode(', ', $view->get('tag')))) {
          $definition['dashboard_block'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Update entity definitions of certain entity types to enable contacts Entity
 * blocks and handle missing form operations.
 *
 * @see \Drupal\contacts\Plugin\Deriver\ContactsEntityBlockDeriver::getDerivativeDefinitions()
 */
function contacts_entity_type_alter(array &$entity_types) {
  /* @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  // Approved entity types.
  $dashboard_entity_types = [
    'user',
    'profile',
  ];

  /* @var \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');
  foreach ($dashboard_entity_types as $type) {
    if (isset($entity_types[$type])) {
      $entity_types[$type]->set('contacts_entity', TRUE);
    }

    // Add form operations for missing form modes.
    $form_modes = $entity_display_repository->getFormModes($type);
    foreach ($form_modes as $name => $form_mode) {
      /* @var \Drupal\Core\Entity\Entity\EntityFormMode $form_mode */
      if (!$entity_types[$type]->getFormClass($name)) {
        // Use the default form for form modes that are not explicitly defined.
        $default_handler_class = $entity_types[$type]->getHandlerClasses()['form']['default'];
        $entity_types[$type]->setFormClass($name, $default_handler_class);
      }
    }
  }

  // Expand out separate entity blocks for profile bundles.
  if (isset($entity_types['profile'])) {
    $entity_types['profile']->set('contacts_use_bundles', TRUE);
  }
}

/**
 * Implements hook_preprocess().
 */
function contacts_preprocess_block(&$variables, $hook) {
  if (isset($variables['plugin_id']) && $variables['plugin_id'] == 'local_actions_block') {
    // Do a first pass to alter our group items.
    foreach ($variables['content'] as $plugin_id => $item) {
      if (empty($item['#link']['localized_options']['is_action_group'])) {
        continue;
      }

      $id = Html::getUniqueId(Html::getId('local-action-group-' . str_replace('.', '-', $plugin_id)));

      $group = [
        '#prefix' => '<li class="action-group-wrapper">',
        '#suffix' => '</li>',
        '#is_group' => TRUE,
        '#attributes' => [
          'class' => ['action-group-wrapper'],
        ],
        'button' => [
          '#type' => 'html_tag',
          '#tag' => 'button',
          '#value' => $item['#link']['title'],
          '#attributes' => isset($item['#link']['localized_options']['attributes']) ? $item['#link']['localized_options']['attributes'] : [],
        ],
        'group' => [
          '#type' => 'container',
          '#attributes' => [
            'id' => $id,
            'class' => ['js-hide', 'action-group'],
          ],
          'links' => [
            '#theme' => 'links',
            '#set_active_class' => FALSE,
            '#links' => [],
            '#attributes' => [
              'class' => ['action-group-links'],
            ],
          ],
        ],
        '#attached' => [
          'library' => 'contacts/action.group',
        ],
      ];
      $group['button']['#attributes']['class'][] = 'action-group-control';
      $group['button']['#attributes']['data-action-group'] = $id;
      if (!empty($item['#link']['localized_options']['attributes']['title'])) {
        $group['group']['links']['#heading']['text'] = $item['#link']['localized_options']['attributes']['title'];
      }

      $variables['content'][$plugin_id] = $group;
    }

    // Now pass through and move links into their groups.
    foreach ($variables['content'] as $plugin_id => $action) {
      // Skip inaccessible links.
      if (isset($action['#access']) && !$action['#access']) {
        continue;
      }

      // Ignore anything that isn't in a group.
      if (empty($action['#link']['localized_options']['action_group'])) {
        continue;
      }

      $group_name = $action['#link']['localized_options']['action_group'];
      if (!empty($variables['content'][$group_name]['#is_group'])) {
        // Get our links container.
        $action['#link'] += $action['#link']['localized_options'];
        $variables['content'][$group_name]['group']['links']['#links'][$plugin_id] = $action['#link'];
        unset($variables['content'][$plugin_id]);
      }
    }

    // Now pass over groups and remove any items without links.
    foreach ($variables['content'] as $plugin_id => $item) {
      if (!empty($variables['content'][$plugin_id]['#is_group'])) {
        if (empty($item['group']['links']['#links'])) {
          unset($variables['content'][$plugin_id]);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function contacts_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['account']['roles']['#default_value'][] = 'crm_indiv';
}

/**
 * Gets color palette options for the contacts hats.
 *
 * @return array
 *   Array of colors keyed by the hex code.
 */
function contacts_get_hat_palette() {
  return [
    'F59FB8' => 'Pixie',
    'E690A8' => 'Cotton Candy',
    'EC8086' => 'Smoothie',
    'D4687E' => 'Hollyhock',
    'B84543' => 'Cranberry',
    'B24F60' => 'Ruby',
    '97544F' => 'Barn Red',
    'F49580' => 'Sorbet',
    'EE825A' => 'Sunset',
    'D98E4D' => 'Goldrush',
    'C77140' => 'Autumn Terracotta',
    'F5CD6D' => 'Canary',
    'FFCD2A' => 'Honey',
    'D3C28A' => 'Flaxen',
    '97986B' => 'Olive',
    'C2CB93' => 'Sweet Leaf',
    'AAD272' => 'Pear',
    '708C4C' => 'Topiary',
    '636E4D' => 'New England Ivy',
    '475F54' => 'Ponderosa Pine',
    '88B6AD' => 'Juniper',
    '9DCDCD' => 'Glacier',
    '48B9B6' => 'Lagoon',
    '84BCD5' => 'Crystal Blue',
    '30789D' => 'Pacifica',
    '6588A9' => 'Indian Corn Blue',
    '435168' => 'Outdoor Denim',
    'B865AB' => 'Thistle',
    '8F7CB2' => 'Gypsy',
    '866A7D' => 'Smokey Plum',
    'D8C7A9' => 'Bamboo',
    'E6D1B8' => 'Champagne',
    'D0D1B8' => 'Cashmere',
    'A58869' => 'Desert Sand',
    'B1816C' => 'Saddle',
    '896859' => 'Chocolate',
    '756857' => 'Cocoa',
    'C0B9B4' => 'Whisper',
    '9A9185' => 'Slate',
  ];
}
