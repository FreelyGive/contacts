<?php

/**
 * @file
 * Module related hook implementations for the contacts module.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function contacts_theme() {
  return [
    'contacts_dash_tabs' => [
      'variables' => ['tabs' => []],
      'template' => 'contacts-dash-tabs',
    ],
    'contacts_indiv' => [
      'variables' => ['content' => []],
      'template' => 'contacts-indiv',
    ],
    'contacts_summary' => [
      'variables' => ['content' => []],
      'template' => 'contacts-summary',
    ],
    'contacts_notes' => [
      'variables' => ['content' => []],
      'template' => 'contacts-notes',
    ],
    'contacts_dash_summary' => [
      'variables' => ['user' => NULL],
      'template' => 'contacts-dash-summary',
    ],
    'user__contacts_dashboard_row' => [
      'base hook' => 'user',
      'template' => 'user--contacts-dashboard-row',
    ]
  ];
}

/**
 * Prepares variables for contact dashboard individual contact tab templates.
 *
 * Default template: contacts-indiv.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - content: Default markup content for this tab.
 */
function template_preprocess_contacts_indiv(array &$variables) {
  $variables['attributes']['id'] = 'contacts-tabs-content';
  $variables['attributes']['class'][] = 'contacts-tabs-content';
  $variables['attributes']['class'][] = 'flex-fill';
}

/**
 * Prepares variables for contact dashboard summary tab templates.
 *
 * Default template: contacts-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - content: Default markup content for this tab.
 */
function template_preprocess_contacts_summary(array &$variables) {
  $variables['attributes']['id'] = 'contacts-tabs-content';
  $variables['attributes']['class'][] = 'contacts-tabs-content';
  $variables['attributes']['class'][] = 'flex-fill';

}

/**
 * Prepares variables for contact dashboard notes tab templates.
 *
 * Default template: contacts-notes.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - content: Default markup content for this tab.
 */
function template_preprocess_contacts_notes(array &$variables) {
  $variables['attributes']['id'] = 'contacts-tabs-content';
  $variables['attributes']['class'][] = 'contacts-tabs-content';
  $variables['attributes']['class'][] = 'flex-fill';

}

/**
 * Prepares variables for contact dashboard tabs.
 *
 * Default template: contacts-dash-tabs.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - tabs: Associative array of tabs and tab properties.
 */
function template_preprocess_contacts_dash_tabs(array &$variables) {
  $variables['attributes'] = [
    'class' => [
      'contacts-ajax-tabs',
      'tabs',
    ],
  ];

  foreach ($variables['tabs'] as &$tab) {
    $tab['attributes'] = !empty($tab['attributes']) ? new Attribute($tab['attributes']) : new Attribute();
    $tab['link_attributes'] = !empty($tab['link_attributes']) ? new Attribute($tab['link_attributes']) : new Attribute();
  }
}

/**
 * Prepares variables for contact dashboard summary block.
 *
 * Default template: contacts-dash-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - user: Fully loaded drupal User object.
 *   - crm_indiv: Boolean whether contact has an indiv profile.
 *   - crm_org: Boolean whether contact has an org profile.
 */
function template_preprocess_contacts_dash_summary(array &$variables) {
  if (!empty($variables['user']->profile_crm_indiv)) {
    $variables['crm_indiv'] = TRUE;
  }
  if (!empty($variables['user']->profile_crm_org)) {
    $variables['crm_org'] = TRUE;
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Add contacts dashboard form operation to profile entity.
 */
function contacts_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['profile']->setFormClass('crm_dashboard', 'Drupal\profile\Form\ProfileForm');
}

/**
 * Implements hook_toolbar_alter().
 *
 * Add contacts icon css to toolbar.
 */
function contacts_toolbar_alter(&$items) {
  // Move the User tab to the right.
  $items['administration']['#attached']['library'][] = 'contacts/contacts.icons';
}

/**
 * Implements hook_page_attachments().
 */
function contacts_page_attachments(array &$attachments) {
  $current_path = \Drupal::service('path.current')->getPath();
  if (substr($current_path, 0, 15) == '/admin/contacts') {
    $attachments['#attached']['library'][] = 'contacts/dashboard';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function contacts_theme_suggestions_user(array $variables) {
  $suggestions = [];
  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['elements']['#user'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'user__' . $sanitized_view_mode;
  foreach ($user->getRoles(TRUE) as $role) {
    if (substr($role, 0, 4) == 'crm_') {
      $suggestions[] = 'user__' . $role . '__';
      $suggestions[] = 'user__' . $role . '__' . $sanitized_view_mode;

    }
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function contacts_preprocess_user(&$variables) {
  if ($variables['elements']['#view_mode'] != 'contacts_dashboard_row') {
    return;
  }

  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['user'];
  $image_display = [
    'label' => 'hidden',
    'type' => 'image',
    'settings' => [
      'image_style' => 'thumbnail',
    ],
  ];

  // Set some defaults.
  // @todo: Simplify this when we have 'primary fields'.
  $variables['url'] = Url::fromRoute('page_manager.page_view_contacts_dashboard_contact', [
    'user' => $user->id(),
  ]);
  $variables['label'] = $user->getDisplayName();
  $variables['image'] = '';
  $variables['address'] = '';

  $roles = user_role_names();
  $variables['roles'] = implode(', ', array_intersect_key($roles, array_fill_keys($user->getRoles(), TRUE)));

  if ($user->hasRole('crm_indiv')) {
    if ($profile = $user->profile_crm_indiv->entity) {
      $variables['profile'] = $profile;
      $variables['label'] = $profile->crm_name->value;
      if ($profile->crm_photo[0]) {
        $variables['image'] = $profile->crm_photo->view($image_display)[0];
      }
      $variables['address'] = $profile->crm_address->locality;
    }
  }
  elseif ($user->hasRole('crm_org')) {
    if ($profile = $user->profile_crm_org->entity) {
      $variables['profile'] = $profile;
      $variables['label'] = $profile->crm_org_name->value;
      if ($profile->crm_logo[0]) {
        $variables['image'] = $profile->crm_logo->view($image_display)[0];
      }
      $variables['address'] = $profile->crm_org_address->locality;
    }
  }
}
