<?php

/**
 * @file
 * Module related hook implementations for the contacts module.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\contacts\Form\ContactsProfileForm;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function contacts_theme() {
  return [
    'contacts_dash_tabs' => [
      'variables' => ['tabs' => []],
      'template' => 'contacts-dash-tabs',
    ],
    'contacts_summary' => [
      'variables' => ['content' => [], 'attributes' => []],
      'template' => 'contacts-summary',
    ],
    'contacts_dash_summary' => [
      'variables' => ['user' => NULL],
      'template' => 'contacts-dash-summary',
    ],
    'user__contacts_dashboard_row' => [
      'base hook' => 'user',
      'template' => 'user--contacts-dashboard-row',
    ],
    'user__contacts_dashboard_row_small' => [
      'base hook' => 'user',
      'template' => 'user--contacts-dashboard-row-small',
    ],
  ];
}

/**
 * Prepares variables for contact dashboard tabs.
 *
 * Default template: contacts-dash-tabs.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - tabs: Associative array of tabs and tab properties.
 */
function template_preprocess_contacts_dash_tabs(array &$variables) {
  $variables['attributes'] = [
    'class' => [
      'contacts-ajax-tabs',
      'tabs',
    ],
  ];

  foreach ($variables['tabs'] as &$tab) {
    $tab['attributes'] = !empty($tab['attributes']) ? new Attribute($tab['attributes']) : new Attribute();
    $tab['link_attributes'] = !empty($tab['link_attributes']) ? new Attribute($tab['link_attributes']) : new Attribute();
  }
}

/**
 * Prepares variables for contact dashboard summary block.
 *
 * Default template: contacts-dash-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - user: Fully loaded drupal User object.
 *   - crm_indiv: Boolean whether contact has an indiv profile.
 *   - crm_org: Boolean whether contact has an org profile.
 */
function template_preprocess_contacts_dash_summary(array &$variables) {
  /* @var \Drupal\decoupled_auth\Entity\DecoupledAuthUser $user */
  $user = $variables['user'];

  $image_display = [
    'label' => 'hidden',
    'type' => 'image',
    'settings' => [
      'image_style' => 'contacts_small',
    ],
  ];
  $default_image_element = [
    '#theme' => 'image_style',
    '#style_name' => $image_display['settings']['image_style'],
    '#width' => 100,
    '#height' => 100,
    '#attributes' => [],
  ];
  $variables['image'] = $user->user_picture[0] ? $user->user_picture[0]->view($image_display) : '';

  if ($user->getEmail()) {
    $email = $user->getEmail();
    $variables['email'] = Link::fromTextAndUrl($email, Url::fromUri('mailto:' . $email));
  }

  $variables['name'] = $user->getDisplayName();

  // For individuals.
  if ($user->hasRole('crm_indiv')) {
    if ($profile = $user->profile_crm_indiv->entity) {
      if ($profile->crm_phone->value) {
        $variables['phone'] = $profile->crm_phone->value;
      }
      if ($profile->crm_dob[0]) {
        $variables['dob'] = $profile->crm_dob[0]->view([
          'label' => 'hidden',
          'settings' => [
            'format_type' => 'html_date',
          ],
        ]);
      }
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
  // For organisations.
  elseif ($user->hasRole('crm_org')) {
    if ($profile = $user->profile_crm_org->entity) {
      if ($profile->crm_phone->value) {
        $variables['phone'] = $profile->crm_phone->value;
      }
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-org.png';
    }
  }
  // Assume this is a web account, so give some indiv like features.
  else {
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Add contacts dashboard form operation to profile entity.
 */
function contacts_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['profile']->setFormClass('crm_dashboard', ContactsProfileForm::class);
}

/**
 * Implements hook_toolbar_alter().
 *
 * Add contacts icon css to toolbar.
 */
function contacts_toolbar_alter(&$items) {
  // Move the User tab to the right.
  $items['administration']['#attached']['library'][] = 'contacts/contacts.icons';
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function contacts_theme_suggestions_user(array $variables) {
  $suggestions = [];
  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['elements']['#user'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'user__' . $sanitized_view_mode;
  foreach ($user->getRoles(TRUE) as $role) {
    if (substr($role, 0, 4) == 'crm_') {
      $suggestions[] = 'user__' . $role . '__';
      $suggestions[] = 'user__' . $role . '__' . $sanitized_view_mode;
    }
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function contacts_preprocess_user(&$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $view_modes = [
    'contacts_dashboard_row',
    'contacts_dashboard_row_small',
  ];
  if (!in_array($view_mode, $view_modes)) {
    return;
  }

  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['user'];
  $image_display = [
    'label' => 'hidden',
    'type' => 'image',
    'settings' => [
      'image_style' => $view_mode == 'contacts_dashboard_row' ? 'contacts_small' : 'contacts_tiny',
    ],
  ];
  $default_image_element = [
    '#theme' => 'image_style',
    '#style_name' => $image_display['settings']['image_style'],
    '#width' => 100,
    '#height' => 100,
    '#attributes' => [],
  ];

  // Set some defaults.
  // @todo: Simplify this when we have 'primary fields'.
  $variables['url'] = Url::fromRoute('page_manager.page_view_contacts_dashboard_contact', [
    'user' => $user->id(),
  ]);
  $variables['label'] = $user->getDisplayName();
  $variables['email'] = $user->getEmail();
  $variables['image'] = $user->user_picture[0] ? $user->user_picture[0]->view($image_display) : '';
  $variables['address'] = '';

  $roles = user_roles();
  uasort($roles, 'contacts_sort_roles');
  $roles = array_map(function ($item) {
    return $item->label();
  }, $roles);
  $variables['roles'] = implode(', ', array_intersect_key($roles, array_fill_keys($user->getRoles(), TRUE)));

  // For individuals.
  if ($user->hasRole('crm_indiv')) {
    if ($profile = $user->profile_crm_indiv->entity) {
      $variables['profile'] = $profile;
      $variables['label'] = $profile->crm_name->value;
      $variables['address'] = $profile->crm_address->locality;
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
  // For organisations.
  elseif ($user->hasRole('crm_org')) {
    if ($profile = $user->profile_crm_org->entity) {
      $variables['profile'] = $profile;
      $variables['label'] = $profile->crm_org_name->value;
      $variables['address'] = $profile->crm_org_address->locality;
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-org.png';
    }
  }
  // Assume this is a web account, so give some indiv like features.
  else {
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
}

/**
 * Sort roles by CRM then alphabetically.
 *
 * @param \Drupal\user\RoleInterface $a
 *   The first role.
 * @param \Drupal\user\RoleInterface $b
 *   The first role.
 *
 * @return int
 *   The comparison result for uasort().
 */
function contacts_sort_roles(RoleInterface $a, RoleInterface $b) {
  $a_crm = substr($a->id(), 0, 4) == 'crm_';
  $b_crm = substr($b->id(), 0, 4) == 'crm_';
  if ($a_crm xor $b_crm) {
    return $a_crm ? -1 : 1;
  }
  return strnatcmp($a->label(), $b->label());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function contacts_preprocess_views_view_unformatted(&$variables) {
  if ($variables['view']->id() == 'contacts_dashboard_indexed') {
    foreach ($variables['rows'] as $id => &$row) {
      $url = Url::fromRoute('page_manager.page_view_contacts_dashboard_contact', [
        'user' => $row['content']['#user']->id(),
      ]);
      $row['attributes']->setAttribute('data-row-link', $url->toString());
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function contacts_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($output['#view']->id() == 'contacts_dashboard_indexed') {
    $output['#attached']['library'][] = 'contacts/listings';
  }
}

/**
 * Implements hook_panels_build_alter().
 */
function contacts_panels_build_alter(array &$build, PanelsDisplayVariant $panels_display) {
  if ($panels_display->getStorageId() == 'contacts_dashboard-panels_variant-0') {
    // Find the crm_type facet and make the labels plural.
    if (isset($build['sidebar'])) {
      foreach (Element::children($build['sidebar']) as $key) {
        $block = &$build['sidebar'][$key];
        if (isset($block['#plugin_id']) && $block['#plugin_id'] == 'facet_block:crm_type') {
          foreach ($block['content'][0]['#items'] as &$item) {
            switch ($item['#attributes']['data-drupal-facet-item-value']) {
              case 'crm_indiv':
                $item['#title']['#value'] = t('People');
                break;

              case 'crm_org':
                $item['#title']['#value'] = t('Organisations');
                break;
            }
          }
        }
      }
    }
  }
  elseif ($panels_display->getStorageId() == 'contacts_dashboard_contact-panels_variant-0') {
    $build['#attached']['library'][] = 'contacts/contact';
  }
}

/**
 * Implements hook_preprocess().
 */
function contacts_preprocess_block(&$variables, $hook) {
  if (isset($variables['plugin_id']) && $variables['plugin_id'] == 'local_actions_block') {
    // Do a first pass to alter our group items.
    foreach ($variables['content'] as $plugin_id => $item) {
      if (empty($item['#link']['localized_options']['is_action_group'])) {
        continue;
      }

      $id = Html::getUniqueId(Html::getId('local-action-group-' . str_replace('.', '-', $plugin_id)));

      $group = [
        '#prefix' => '<li class="action-group-wrapper">',
        '#suffix' => '</li>',
        '#is_group' => TRUE,
        '#attributes' => [
          'class' => ['action-group-wrapper'],
        ],
        'button' => [
          '#type' => 'html_tag',
          '#tag' => 'button',
          '#value' => $item['#link']['title'],
          '#attributes' => isset($item['#link']['localized_options']['attributes']) ? $item['#link']['localized_options']['attributes'] : [],
        ],
        'group' => [
          '#type' => 'container',
          '#attributes' => [
            'id' => $id,
            'class' => ['js-hide', 'action-group'],
          ],
          'links' => [
            '#theme' => 'links',
            '#set_active_class' => FALSE,
            '#links' => [],
            '#attributes' => [
              'class' => ['action-group-links'],
            ],
          ],
        ],
        '#attached' => [
          'library' => 'contacts/action.group',
        ],
      ];
      $group['button']['#attributes']['class'][] = 'action-group-control';
      $group['button']['#attributes']['data-action-group'] = $id;
      if (!empty($item['#link']['localized_options']['attributes']['title'])) {
        $group['group']['links']['#heading']['text'] = $item['#link']['localized_options']['attributes']['title'];
      }

      $variables['content'][$plugin_id] = $group;
    }

    // Now pass through and move links into their groups.
    foreach ($variables['content'] as $plugin_id => $action) {
      // Skip inaccessible links.
      if (isset($action['#access']) && !$action['#access']) {
        continue;
      }

      // Ignore anything that isn't in a group.
      if (empty($action['#link']['localized_options']['action_group'])) {
        continue;
      }

      $group_name = $action['#link']['localized_options']['action_group'];
      if (!empty($variables['content'][$group_name]['#is_group'])) {
        // Get our links container.
        $action['#link'] += $action['#link']['localized_options'];
        $variables['content'][$group_name]['group']['links']['#links'][$plugin_id] = $action['#link'];
        unset($variables['content'][$plugin_id]);
      }
    }

    // Now pass over groups and remove any items without links.
    foreach ($variables['content'] as $plugin_id => $item) {
      if (!empty($variables['content'][$plugin_id]['#is_group'])) {
        if (empty($item['group']['links']['#links'])) {
          unset($variables['content'][$plugin_id]);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function contacts_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['account']['roles']['#default_value'][] = 'crm_indiv';
}

